---
version: "3.1"

volumes:
  prometheus_data: {}
  grafana_data: {}

networks:
  grafana-prometheus:

services:
  caddy:
    image: caddy:2.5.1
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./caddy/config/Caddyfile:/etc/caddy/Caddyfile
      - ./caddy/data:/caddy-data
      - ./caddy/main-site:/caddy-main-site
    networks:
      - grafana-prometheus

  prometheus:
    image: prom/prometheus:v2.36.2
    restart: always
    volumes:
      # Configuration file (host - container)
      - ./prometheus/:/etc/prometheus/
      # Data (host - container)
      - /data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      # 6 months
      - '--storage.tsdb.retention.time=180d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-admin-api'
    ports:
      - 9090:9090
    networks:
      - grafana-prometheus

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - 9100:9100
    networks:
      - grafana-prometheus

  grafana:
    image: grafana/grafana
    restart: always
    volumes:
      # This is the data volume
      - /data/grafana:/var/lib/grafana
      # When you start grafana for the first time it will pull dashboards and
      # data sources from there
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    depends_on:
      - prometheus
    ports:
      - 3030:3000
    env_file:
      - ./grafana/config.monitoring
    networks:
      - grafana-prometheus

  flask-app:
    container_name: "flask-app"
    restart: always
    build:
      context: ./flask-app
      dockerfile: Dockerfile
    ports:
      - 9091:9091
    networks:
      - grafana-prometheus

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - grafana-prometheus

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "7071:7071"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./kafka:/kafka_vol
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OPTS: -javaagent:/kafka_vol/jmx_prometheus_javaagent-0.17.0.jar=7071:/kafka_vol/prom-jmx-agent-config.yml
    networks:
      - grafana-prometheus

  cloudwatch-exporter:
    container_name: "cloudwatch-exporter"
    restart: always
    environment:
      AWS_ACCESS_KEY_ID: {{ aws_access_key_id }}
      AWS_SECRET_ACCESS_KEY: {{ aws_secret_access_key }}
    build:
      context: ./cloudwatch-exporter
      dockerfile: Dockerfile
    ports:
      - 9106:9106
    networks:
      - grafana-prometheus

  prombackup-server:
    container_name: "prombackup-server"
    restart: always
    build:
      context: ./prombackup
      dockerfile: Dockerfile
    volumes:
      # (host - container)
      - /data/prometheus:/data/prometheus
    ports:
      - {{ prombackup_listen_port }}:{{ prombackup_listen_port }}
    environment:
      AWS_ACCESS_KEY_ID: {{ aws_access_key_id }}
      AWS_SECRET_ACCESS_KEY: {{ aws_secret_access_key }}
    networks:
      - grafana-prometheus

  ksak:
    container_name: "ksak"
    restart: always
    build:
      context: ./ksak
      dockerfile: Dockerfile
    ports:
      - {{ ksak_listen_port }}:{{ ksak_listen_port }}
    networks:
      - grafana-prometheus
